import { CalendarBusyDay } from 'src/calendar/models/busy-day.model';
import { backInlineBtn } from '../../../general';
import { formatKeyboard, getNowDate, getZero } from 'src/libs/common';
import { getEmptyBtns } from '../../assets';
import { months, weekDays } from '../../configs';

export const calendarMonthsMessage = () => `<b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤—Å—Ç—Ä–µ—á/—Å–æ–±—ã—Ç–∏–π</b>

üóì –ö–∞–ª–µ–Ω–¥–∞—Ä—å ‚Äì —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á –∏ —Å–æ–±—ã—Ç–∏–π.

üëá –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –≤–∞–º –Ω–µ –ø—Ä–∏–¥–µ—Ç—Å—è –æ–±—Å—É–∂–¥–∞—Ç—å –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏, —Ç–∞–∫ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ –≤—ã–±–µ—Ä–µ—Ç –µ–≥–æ —Å–∞–º, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–µ–º –≥—Ä–∞—Ñ–∏–∫–µ.

–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É, –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏—Ç–µ –µ—ë –∏ –Ω–∞–∂–º–∏—Ç–µ <b>–ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π</b>.

<i>‚ùå ‚Äì –¥–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>`;

export const calendarMonthsMarkup = (
  userId: string,
  busyDays: CalendarBusyDay[],
  incMouth = 0,
) => {
  const oldestDate = getNowDate();
  oldestDate.setUTCMonth(oldestDate.getUTCMonth() + 1 + incMouth);
  oldestDate.setUTCDate(0);
  const maxDate = oldestDate.getUTCDate();
  const maxDateDay = oldestDate.getUTCDay();

  const newestDate = getNowDate();
  newestDate.setUTCMonth(newestDate.getUTCMonth() + incMouth);
  newestDate.setUTCDate(1);
  const minDateDay = newestDate.getUTCDay();

  const days = [];

  if (minDateDay !== 1) {
    days.push(...getEmptyBtns(minDateDay === 0 ? 6 : minDateDay - 1));
  }

  for (let i = 1; i < maxDate + 1; i++) {
    const isBusy = busyDays.map((i) => i.date).includes(i);

    days.push({
      text: isBusy ? '‚ùå' : `${i}`,
      callback_data: `${getZero(i)}.${getZero(
        oldestDate.getUTCMonth() + 1,
      )}.${oldestDate.getUTCFullYear()}::calendar_date`,
    });
  }

  const daysDiff = maxDate % 7;
  const isMouthClear = daysDiff === 0 && minDateDay === 1;

  if (!isMouthClear && maxDateDay !== 0) {
    days.push(...getEmptyBtns(7 - maxDateDay));
  }

  const mouthBtn = months[oldestDate.getUTCMonth()];

  return {
    inline_keyboard: [
      [
        {
          ...mouthBtn,
          text: `${mouthBtn.text} ${oldestDate.getUTCFullYear()}`,
        },
      ],
      weekDays,
      ...formatKeyboard(days, 7),
      [
        { text: '‚óÄÔ∏è', callback_data: `${incMouth}::prev_calendar_mouth` },
        { text: '‚ñ∂Ô∏è', callback_data: `${incMouth}::next_calendar_mouth` },
      ],
      [
        {
          text: 'üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π',
          url: encodeURI(
            `https://t.me/share/url?url=https://t.me/EntServicesBot?start=cal-m-${getZero(
              oldestDate.getUTCMonth() + 1,
            )}.${oldestDate.getUTCFullYear()}-${userId}&text=–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–æ–µ–π –∑–∞–Ω—è—Ç–æ—Å—Ç–∏`,
          ),
        },
      ],
      backInlineBtn,
    ],
  };
};
