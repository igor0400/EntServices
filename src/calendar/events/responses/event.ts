import { textMonths } from 'src/calendar/configs';
import { CalendarEvent } from 'src/calendar/models/event.model';
import { backInlineBtn, getDayDate } from 'src/general';
import { getEventTexts } from '../assets';

export const eventMessage = (event: CalendarEvent) => {
  const { title, textDate, textStart, textEnd, textMembers } =
    getEventTexts(event);

  return `<b>${title}</b>

üóì <b>–î–∞—Ç–∞:</b> <code>${textDate}</code>
üïó <b>–ù–∞—á–∞–ª–æ:</b> <code>${textStart}</code>
üïî <b>–ö–æ–Ω–µ—Ü:</b> <code>${textEnd}</code>

üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> ${textMembers}`;
};

export const eventMarkup = (
  event: CalendarEvent,
  type: 'owner' | 'inviter' = 'owner',
  inviterId?: string,
) => {
  const startDate = new Date(event?.startTime);
  const textDate = `${startDate.getUTCDate()} ${
    textMonths[startDate.getUTCMonth()]
  }`;
  const deleteBtn =
    type === 'owner'
      ? [
          {
            text: 'üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ',
            callback_data: `${event.id}::delete_calendar_event_confirm`,
          },
        ]
      : [
          {
            text: 'üèÉ –ü–æ–∫–∏–Ω—É—Ç—å —Å–æ–±—ã—Ç–∏–µ',
            callback_data: `${event.id}::leave_calendar_event_confirm`,
          },
        ];

  const backDateBtn = inviterId
    ? [
        {
          text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥',
          callback_data: `${getDayDate(
            startDate,
          )}_${inviterId}::back_to_share_calendar_date`,
        },
      ]
    : [
        {
          text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥',
          callback_data: `${getDayDate(startDate)}::back_to_calendar_date`,
        },
      ];

  return {
    inline_keyboard: [
      [
        {
          text: 'üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å',
          url: `${encodeURI(
            `https://t.me/share/url?url=https://t.me/EntServicesBot?start=cal-e-j-${event.id}&text=–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–±—ã—Ç–∏—é ${textDate}`,
          )}`,
        },
      ],
      deleteBtn,
      backDateBtn,
      backInlineBtn,
    ],
  };
};
