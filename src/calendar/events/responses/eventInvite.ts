import { CalendarEvent } from 'src/calendar/models/event.model';
import { backInlineBtn, localBackInlineBtn } from 'src/general';
import { getUserName } from 'src/libs/common';
import { User } from 'src/users/models/user.model';
import { getEventTexts } from '../assets';

export const eventInviteMessage = (event: CalendarEvent, owner: User) => {
  const { title, textDate, textStart, textEnd, textMembers } =
    getEventTexts(event);

  return `<b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ</b>

üóí ${getUserName(owner)} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–±—ã—Ç–∏—é ${
    title === '–°–æ–±—ã—Ç–∏–µ' ? '' : `<b>"${title}"</b>`
  }

üóì <b>–î–∞—Ç–∞:</b> <code>${textDate}</code>
üïó <b>–ù–∞—á–∞–ª–æ:</b> <code>${textStart}</code>
üïî <b>–ö–æ–Ω–µ—Ü:</b> <code>${textEnd}</code>

üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> ${textMembers}`;
};

export const eventInviteMarkup = (eventId: string, userId?: string) => {
  const backNotifi = userId
    ? [localBackInlineBtn('back_to_user_notifications')]
    : [];

  return {
    inline_keyboard: [
      [
        {
          text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å',
          callback_data: `${eventId}::accept_event_invite`,
        },
        {
          text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
          callback_data: `${eventId}::reject_event_invite`,
        },
      ],
      ...backNotifi,
      backInlineBtn,
    ],
  };
};
